{"ast":null,"code":"var _jsxFileName = \"/Users/Kh/8_react/workspace/ums_frontend/src/components/DaumPostCode.jsx\",\n  _s = $RefreshSig$();\nimport Button from \"./Button\";\nimport { useDaumPostcodePopup } from 'react-daum-postcode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DaumPostCode = () => {\n  _s();\n  const open = useDaumPostcodePopup(\"https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\");\n  const handleComplete = function (data) {\n    // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\n\n    // 각 주소의 노출 규칙에 따라 주소를 조합한다.\n    // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\n    var addr = ''; // 주소 변수\n    var extraAddr = ''; // 참고항목 변수\n\n    //사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.\n    if (data.userSelectedType === 'R') {\n      // 사용자가 도로명 주소를 선택했을 경우\n      addr = data.roadAddress;\n    } else {\n      // 사용자가 지번 주소를 선택했을 경우(J)\n      addr = data.jibunAddress;\n    }\n\n    // 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.\n    if (data.userSelectedType === 'R') {\n      // 법정동명이 있을 경우 추가한다. (법정리는 제외)\n      // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\n      if (data.bname !== '' && /[동|로|가]$/g.test(data.bname)) {\n        extraAddr += data.bname;\n      }\n      // 건물명이 있고, 공동주택일 경우 추가한다.\n      if (data.buildingName !== '' && data.apartment === 'Y') {\n        extraAddr += extraAddr !== '' ? ', ' + data.buildingName : data.buildingName;\n      }\n      // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\n      if (extraAddr !== '') {\n        extraAddr = ' (' + extraAddr + ')';\n      }\n      // 조합된 참고항목을 해당 필드에 넣는다.\n      document.getElementById(\"addretc\").value = extraAddr;\n    } else {\n      document.getElementById(\"addretc\").value = '';\n    }\n\n    // 우편번호와 주소 정보를 해당 필드에 넣는다.\n    document.getElementById('zipcode').value = data.zonecode;\n    document.getElementById(\"addr\").value = addr;\n    // 커서를 상세주소 필드로 이동한다.\n    document.getElementById(\"addrdetail\").value = \"\";\n    document.getElementById(\"addrdetail\").focus();\n  };\n  const handleClick = () => {\n    open({\n      onComplete: handleComplete\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Button, {\n    id: \"post_btn\",\n    value: \"\\uC6B0\\uD3B8\\uBC88\\uD638 \\uCC3E\\uAE30\",\n    size: \"small\",\n    onClick: handleClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(DaumPostCode, \"wdTqFaf4SE0v5bH+s4jJJmiPkAQ=\", false, function () {\n  return [useDaumPostcodePopup];\n});\n_c = DaumPostCode;\nexport default DaumPostCode;\nvar _c;\n$RefreshReg$(_c, \"DaumPostCode\");","map":{"version":3,"names":["Button","useDaumPostcodePopup","jsxDEV","_jsxDEV","DaumPostCode","_s","open","handleComplete","data","addr","extraAddr","userSelectedType","roadAddress","jibunAddress","bname","test","buildingName","apartment","document","getElementById","value","zonecode","focus","handleClick","onComplete","id","size","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Kh/8_react/workspace/ums_frontend/src/components/DaumPostCode.jsx"],"sourcesContent":["import Button from \"./Button\";\r\nimport {useDaumPostcodePopup} from 'react-daum-postcode';\r\n\r\nconst DaumPostCode = () => {\r\n    const open = useDaumPostcodePopup(\"https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\");\r\n\r\n    const handleComplete = function(data) {\r\n        // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n\r\n        // 각 주소의 노출 규칙에 따라 주소를 조합한다.\r\n        // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n        var addr = ''; // 주소 변수\r\n        var extraAddr = ''; // 참고항목 변수\r\n\r\n        //사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.\r\n        if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우\r\n            addr = data.roadAddress;\r\n        } else { // 사용자가 지번 주소를 선택했을 경우(J)\r\n            addr = data.jibunAddress;\r\n        }\r\n\r\n        // 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.\r\n        if(data.userSelectedType === 'R'){\r\n            // 법정동명이 있을 경우 추가한다. (법정리는 제외)\r\n            // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\r\n            if(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){\r\n                extraAddr += data.bname;\r\n            }\r\n            // 건물명이 있고, 공동주택일 경우 추가한다.\r\n            if(data.buildingName !== '' && data.apartment === 'Y'){\r\n                extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n            }\r\n            // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\r\n            if(extraAddr !== ''){\r\n                extraAddr = ' (' + extraAddr + ')';\r\n            }\r\n            // 조합된 참고항목을 해당 필드에 넣는다.\r\n            document.getElementById(\"addretc\").value = extraAddr;\r\n        \r\n        } else {\r\n            document.getElementById(\"addretc\").value = '';\r\n        }\r\n\r\n        // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n        document.getElementById('zipcode').value = data.zonecode;\r\n        document.getElementById(\"addr\").value = addr;\r\n        // 커서를 상세주소 필드로 이동한다.\r\n        document.getElementById(\"addrdetail\").value = \"\";\r\n        document.getElementById(\"addrdetail\").focus();\r\n    }\r\n\r\n    const handleClick = ()=>{\r\n        open({onComplete:handleComplete});\r\n    }\r\n\r\n    return (\r\n        <Button id=\"post_btn\" value=\"우편번호 찾기\" size=\"small\" onClick={handleClick}></Button>\r\n    )\r\n}\r\nexport default DaumPostCode;"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,UAAU;AAC7B,SAAQC,oBAAoB,QAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,IAAI,GAAGL,oBAAoB,CAAC,qEAAqE,CAAC;EAExG,MAAMM,cAAc,GAAG,SAAAA,CAASC,IAAI,EAAE;IAClC;;IAEA;IACA;IACA,IAAIC,IAAI,GAAG,EAAE,CAAC,CAAC;IACf,IAAIC,SAAS,GAAG,EAAE,CAAC,CAAC;;IAEpB;IACA,IAAIF,IAAI,CAACG,gBAAgB,KAAK,GAAG,EAAE;MAAE;MACjCF,IAAI,GAAGD,IAAI,CAACI,WAAW;IAC3B,CAAC,MAAM;MAAE;MACLH,IAAI,GAAGD,IAAI,CAACK,YAAY;IAC5B;;IAEA;IACA,IAAGL,IAAI,CAACG,gBAAgB,KAAK,GAAG,EAAC;MAC7B;MACA;MACA,IAAGH,IAAI,CAACM,KAAK,KAAK,EAAE,IAAI,WAAW,CAACC,IAAI,CAACP,IAAI,CAACM,KAAK,CAAC,EAAC;QACjDJ,SAAS,IAAIF,IAAI,CAACM,KAAK;MAC3B;MACA;MACA,IAAGN,IAAI,CAACQ,YAAY,KAAK,EAAE,IAAIR,IAAI,CAACS,SAAS,KAAK,GAAG,EAAC;QAClDP,SAAS,IAAKA,SAAS,KAAK,EAAE,GAAG,IAAI,GAAGF,IAAI,CAACQ,YAAY,GAAGR,IAAI,CAACQ,YAAa;MAClF;MACA;MACA,IAAGN,SAAS,KAAK,EAAE,EAAC;QAChBA,SAAS,GAAG,IAAI,GAAGA,SAAS,GAAG,GAAG;MACtC;MACA;MACAQ,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC,CAACC,KAAK,GAAGV,SAAS;IAExD,CAAC,MAAM;MACHQ,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC,CAACC,KAAK,GAAG,EAAE;IACjD;;IAEA;IACAF,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC,CAACC,KAAK,GAAGZ,IAAI,CAACa,QAAQ;IACxDH,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAACC,KAAK,GAAGX,IAAI;IAC5C;IACAS,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACC,KAAK,GAAG,EAAE;IAChDF,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACG,KAAK,CAAC,CAAC;EACjD,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAI;IACpBjB,IAAI,CAAC;MAACkB,UAAU,EAACjB;IAAc,CAAC,CAAC;EACrC,CAAC;EAED,oBACIJ,OAAA,CAACH,MAAM;IAACyB,EAAE,EAAC,UAAU;IAACL,KAAK,EAAC,uCAAS;IAACM,IAAI,EAAC,OAAO;IAACC,OAAO,EAAEJ;EAAY;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AAE1F,CAAC;AAAA1B,EAAA,CAvDKD,YAAY;EAAA,QACDH,oBAAoB;AAAA;AAAA+B,EAAA,GAD/B5B,YAAY;AAwDlB,eAAeA,YAAY;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}